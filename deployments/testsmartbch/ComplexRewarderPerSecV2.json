{
  "address": "0x0db386AC3F167b1BAf69ccE7Cdd2E18396C1480C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IEmberDistributorV2",
          "name": "_distributorV2",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isNative",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "AddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "phase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSec",
          "type": "uint256"
        }
      ],
      "name": "AddRewardInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "SetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "_getTimeElapsed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "_updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accTokenPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct ComplexRewarderPerSecV2.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerSec",
          "type": "uint256"
        }
      ],
      "name": "addRewardInfo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "currentEndTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributorV2",
      "outputs": [
        {
          "internalType": "contract IEmberDistributorV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "emergencyRewardWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isNative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "onEmberReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolRewardInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerSec",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolRewardsPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardInfoLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accTokenPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct ComplexRewarderPerSecV2.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2dfcf4a3ddcd2ee9aa07fc71cd24140e18e10cee4e2701d4568f0d6e9fe26637",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x9BCd6FCbb04cA5f7453635dEEBd0b9E7Bc28FD15",
    "contractAddress": "0x0db386AC3F167b1BAf69ccE7Cdd2E18396C1480C",
    "transactionIndex": 0,
    "gasUsed": "2469796",
    "logsBloom": "0x
    "blockHash": "0x95718c20843492f13e6d225e6671b7f9a1e2c0a94ed2205729597d6496188c5b",
    "transactionHash": "0x2dfcf4a3ddcd2ee9aa07fc71cd24140e18e10cee4e2701d4568f0d6e9fe26637",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2905671,
        "transactionHash": "0x2dfcf4a3ddcd2ee9aa07fc71cd24140e18e10cee4e2701d4568f0d6e9fe26637",
        "address": "0x0db386AC3F167b1BAf69ccE7Cdd2E18396C1480C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009bcd6fcbb04ca5f7453635deebd0b9e7bc28fd15"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x95718c20843492f13e6d225e6671b7f9a1e2c0a94ed2205729597d6496188c5b"
      }
    ],
    "blockNumber": 2905671,
    "cumulativeGasUsed": "2469796",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b2C58719a2073640BfC390D703eA832057D2543",
    "0x0cf19C89e1F3d20B28dAB683EeE6C1cBf3B6c828",
    true
  ],
  "solcInputHash": "46b40b1aeddaef79b9a0b55b8a9e0801",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IEmberDistributorV2\",\"name\":\"_distributorV2\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSec\",\"type\":\"uint256\"}],\"name\":\"AddRewardInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"_getTimeElapsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"_updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct ComplexRewarderPerSecV2.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerSec\",\"type\":\"uint256\"}],\"name\":\"addRewardInfo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"currentEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorV2\",\"outputs\":[{\"internalType\":\"contract IEmberDistributorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onEmberReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSec\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolRewardsPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInfoLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct ComplexRewarderPerSecV2.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_updatePool(uint256)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}},\"add(uint256,uint256,uint256)\":{\"params\":{\"_allocPoint\":\"allocation of the new pool.\",\"_pid\":\"pool id on DistributorV2\"}},\"onEmberReward(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Number of LP tokens the user has\",\"_user\":\"Address of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"The index of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}}},\"stateVariables\":{\"poolRewardInfo\":{\"details\":\"this is mostly used for extending reward period\"},\"totalAllocPoint\":{\"details\":\"Total allocation points. Must be the sum of all allocation points in all pools.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_getTimeElapsed(uint256,uint256,uint256)\":{\"notice\":\"Return reward multiplier over the given _from to _to timestamp.\"},\"_updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool.\"},\"add(uint256,uint256,uint256)\":{\"notice\":\"Add a new pool. Can only be called by the owner.\"},\"addRewardInfo(uint256,uint256,uint256)\":{\"notice\":\"if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\"},\"currentEndTimestamp(uint256)\":{\"notice\":\"this will return end timestamp based on the current block timestamp.\"},\"emergencyRewardWithdraw(uint256,uint256,address)\":{\"notice\":\"Withdraw reward. EMERGENCY ONLY.\"},\"onEmberReward(uint256,address,uint256)\":{\"notice\":\"Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\"},\"pendingTokens(uint256,address)\":{\"notice\":\"View function to see pending Reward on frontend.\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each pool.\"},\"poolRewardInfo(uint256,uint256)\":{\"notice\":\"Reward info is a set of {endTimestamp, rewardPerSec} indexed by pool id\"},\"poolRewardsPerSec(uint256)\":{\"notice\":\"View function to see pool rewards per sec\"},\"rewardInfoLimit()\":{\"notice\":\"limit length of reward info how many phases are allowed\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool.\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"}},\"notice\":\"This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward stakers with their native token alongside EMBER. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":\"ComplexRewarderPerSecV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/IEmberDistributorV2.sol\\npragma solidity ^0.8.2;\\n\\ninterface IEmberDistributorV2 {\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\n\\n/**\\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\\n * stakers with their native token alongside EMBER.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n */\\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    IBoringERC20 public immutable override rewardToken;\\n    IEmberDistributorV2 public immutable distributorV2;\\n    bool public immutable isNative;\\n\\n    /// @notice Info of each distributorV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of REWARD entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each distributorV2 poolInfo.\\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\\n    /// `startTimestamp` The start timestamp of rewards.\\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// `totalRewards` The amount of rewards added to the pool.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 startTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        uint256 totalRewards;\\n    }\\n\\n    /// @notice Reward info\\n    /// `startTimestamp` The start timestamp of rewards\\n    /// `endTimestamp` The end timestamp of rewards\\n    /// `rewardPerSec` The amount of rewards per second\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 rewardPerSec;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @dev this is mostly used for extending reward period\\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\\n    /// indexed by pool id\\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\\n\\n    uint256[] public poolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    /// @notice limit length of reward info\\n    /// how many phases are allowed\\n    uint256 public immutable rewardInfoLimit = 52; //1y\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accTokenPerShare\\n    );\\n\\n    event AddRewardInfo(\\n        uint256 indexed pid,\\n        uint256 indexed phase,\\n        uint256 endTimestamp,\\n        uint256 rewardPerSec\\n    );\\n\\n    modifier onlyDistributorV2() {\\n        require(\\n            msg.sender == address(distributorV2),\\n            \\\"onlyDistributorV2: only EmberDistributorV2 can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IBoringERC20 _rewardToken,\\n        IEmberDistributorV2 _distributorV2,\\n        bool _isNative\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)),\\n            \\\"constructor: reward token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_distributorV2)),\\n            \\\"constructor: EmberDistributorV2 must be a valid contract\\\"\\n        );\\n        rewardToken = _rewardToken;\\n        distributorV2 = _distributorV2;\\n        isNative = _isNative;\\n\\n        uint256 decimalsRewardToken = uint256(\\n            _isNative ? 18 : _rewardToken.safeDecimals()\\n        );\\n        require(\\n            decimalsRewardToken < 30,\\n            \\\"constructor: reward token decimals must be inferior to 30\\\"\\n        );\\n\\n        ACC_TOKEN_PRECISION = uint256(\\n            10**(uint256(30) - (decimalsRewardToken))\\n        );\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @param _pid pool id on DistributorV2\\n    /// @param _allocPoint allocation of the new pool.\\n    function add(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _startTimestamp\\n    ) public onlyOwner {\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo[_pid] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            startTimestamp: _startTimestamp,\\n            lastRewardTimestamp: _startTimestamp,\\n            accTokenPerShare: 0,\\n            totalRewards: 0\\n        });\\n\\n        poolIds.push(_pid);\\n        emit AddPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\\n    function addRewardInfo(\\n        uint256 _pid,\\n        uint256 _endTimestamp,\\n        uint256 _rewardPerSec\\n    ) external payable onlyOwner {\\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"add reward info: reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\\n                block.timestamp,\\n            \\\"add reward info: reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\\n            \\\"add reward info: bad new endTimestamp\\\"\\n        );\\n\\n        uint256 startTimestamp = rewardInfo.length == 0\\n            ? pool.startTimestamp\\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\\n\\n        uint256 timeRange = _endTimestamp - startTimestamp;\\n        uint256 totalRewards = timeRange * _rewardPerSec;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalRewards\\n            );\\n        } else {\\n            require(\\n                msg.value == totalRewards,\\n                \\\"add reward info: not enough funds to transfer\\\"\\n            );\\n        }\\n\\n        pool.totalRewards += totalRewards;\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                startTimestamp: startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardPerSec: _rewardPerSec\\n            })\\n        );\\n\\n        emit AddRewardInfo(\\n            _pid,\\n            rewardInfo.length - 1,\\n            _endTimestamp,\\n            _rewardPerSec\\n        );\\n    }\\n\\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_timestamp <= rewardInfo[i].endTimestamp)\\n                return rewardInfo[i].endTimestamp;\\n        }\\n\\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\\n        /// so return the latest reward info.\\n        return rewardInfo[len - 1].endTimestamp;\\n    }\\n\\n    /// @notice this will return end timestamp based on the current block timestamp.\\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\\n        return _endTimestampOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\\n    function _getTimeElapsed(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _endTimestamp\\n    ) public pure returns (uint256) {\\n        if ((_from >= _endTimestamp) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endTimestamp) {\\n            return _to - _from;\\n        }\\n        return _endTimestamp - _from;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid)\\n        external\\n        nonReentrant\\n        returns (PoolInfo memory pool)\\n    {\\n        return _updatePool(_pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return pool;\\n        }\\n\\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\\n\\n        if (lpSupply == 0) {\\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\\n            // so that ALL reward will be distributed.\\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\\n            // in order to keep the multiplier = 0\\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                emit UpdatePool(\\n                    pid,\\n                    pool.lastRewardTimestamp,\\n                    lpSupply,\\n                    pool.accTokenPerShare\\n                );\\n            }\\n\\n            return pool;\\n        }\\n\\n        /// @dev for each reward info\\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\\n            // or (reward info's endtimestamp - pool.timestamp) or 0\\n            uint256 timeElapsed = _getTimeElapsed(\\n                pool.lastRewardTimestamp,\\n                block.timestamp,\\n                rewardInfo[i].endTimestamp\\n            );\\n            if (timeElapsed == 0) continue;\\n\\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\\n            } else {\\n                pool.lastRewardTimestamp = block.timestamp;\\n            }\\n\\n            uint256 tokenReward = (timeElapsed *\\n                rewardInfo[i].rewardPerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\n                lpSupply);\\n        }\\n\\n        poolInfo[pid] = pool;\\n\\n        emit UpdatePool(\\n            pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accTokenPerShare\\n        );\\n\\n        return pool;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function _massUpdatePools() internal {\\n        uint256 length = poolIds.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(poolIds[pid]);\\n        }\\n    }\\n\\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _amount Number of LP tokens the user has\\n    function onEmberReward(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyDistributorV2 nonReentrant {\\n        PoolInfo memory pool = _updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 pending = 0;\\n        uint256 rewardBalance = 0;\\n\\n        if (isNative) {\\n            rewardBalance = address(this).balance;\\n        } else {\\n            rewardBalance = rewardToken.balanceOf(address(this));\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = (((user.amount * pool.accTokenPerShare) /\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\n\\n            if (pending > 0) {\\n                if (isNative) {\\n                    if (pending > rewardBalance) {\\n                        (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    }\\n                } else {\\n                    if (pending > rewardBalance) {\\n                        rewardToken.safeTransfer(_user, rewardBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                    }\\n                }\\n            }\\n        }\\n\\n        user.amount = _amount;\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending Reward on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            _pendingTokens(\\n                _pid,\\n                userInfo[_pid][_user].amount,\\n                userInfo[_pid][_user].rewardDebt\\n            );\\n    }\\n\\n    function _pendingTokens(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 cursor = pool.lastRewardTimestamp;\\n\\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n                uint256 timeElapsed = _getTimeElapsed(\\n                    cursor,\\n                    block.timestamp,\\n                    rewardInfo[i].endTimestamp\\n                );\\n                if (timeElapsed == 0) continue;\\n                cursor = rewardInfo[i].endTimestamp;\\n\\n                uint256 tokenReward = (timeElapsed *\\n                    rewardInfo[i].rewardPerSec *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accTokenPerShare +=\\n                    (tokenReward * ACC_TOKEN_PRECISION) /\\n                    lpSupply;\\n            }\\n        }\\n\\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\n            _rewardDebt);\\n    }\\n\\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\\n                return\\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\\n                    totalAllocPoint;\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardPerSecOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Withdraw reward. EMERGENCY ONLY.\\n    function emergencyRewardWithdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\\n\\n        require(\\n            currentStakingPendingReward + _amount <= pool.totalRewards,\\n            \\\"emergency reward withdraw: not enough reward token\\\"\\n        );\\n        pool.totalRewards -= _amount;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransfer(_beneficiary, _amount);\\n        } else {\\n            (bool sent, ) = _beneficiary.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"emergency reward withdraw: failed to send\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x741fd711164cc524087390e34450f08940e0686db0346178661dfcd2faf3b7cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040526000600655603460e0523480156200001c57600080fd5b5060405162003126380380620031268339810160408190526200003f9162000376565b6200004a3362000257565b600180819055506200006783620002a760201b62001da11760201c565b620000d45760405162461bcd60e51b815260206004820152603260248201527f636f6e7374727563746f723a2072657761726420746f6b656e206d7573742062604482015271194818481d985b1a590818dbdb9d1c9858dd60721b60648201526084015b60405180910390fd5b620000ea82620002a760201b62001da11760201c565b6200015e5760405162461bcd60e51b815260206004820152603860248201527f636f6e7374727563746f723a20456d6265724469737472696275746f7256322060448201527f6d75737420626520612076616c696420636f6e747261637400000000000000006064820152608401620000cb565b6001600160601b0319606084811b821660805283901b1660a05280151560f81b60c052600081620001ae57620001a8846001600160a01b0316620002ad60201b62001da71760201c565b620001b1565b60125b60ff169050601e81106200022e5760405162461bcd60e51b815260206004820152603960248201527f636f6e7374727563746f723a2072657761726420746f6b656e20646563696d6160448201527f6c73206d75737420626520696e666572696f7220746f203330000000000000006064820152608401620000cb565b6200023b81601e6200053f565b6200024890600a62000481565b61010052506200058892505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3b151590565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b03861691620002f59190620003fa565b600060405180830381855afa9150503d806000811462000332576040519150601f19603f3d011682016040523d82523d6000602084013e62000337565b606091505b50915091508180156200034b575080516020145b620003585760126200036e565b808060200190518101906200036e9190620003ce565b949350505050565b6000806000606084860312156200038c57600080fd5b835162000399816200056f565b6020850151909350620003ac816200056f565b60408501519092508015158114620003c357600080fd5b809150509250925092565b600060208284031215620003e157600080fd5b815160ff81168114620003f357600080fd5b9392505050565b6000825160005b818110156200041d576020818601810151858301520162000401565b818111156200042d576000828501525b509190910192915050565b600181815b80851115620004795781600019048211156200045d576200045d62000559565b808516156200046b57918102915b93841c93908002906200043d565b509250929050565b6000620003f383836000826200049a5750600162000539565b81620004a95750600062000539565b8160018114620004c25760028114620004cd57620004ed565b600191505062000539565b60ff841115620004e157620004e162000559565b50506001821b62000539565b5060208310610133831016604e8410600b841016171562000512575081810a62000539565b6200051e838362000438565b806000190482111562000535576200053562000559565b0290505b92915050565b60008282101562000554576200055462000559565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146200058557600080fd5b50565b60805160601c60a05160601c60c05160f81c60e05161010051612ad262000654600039600081816115a7015281816117a301528181611b5e015281816120e001526121340152600081816101960152610a9c0152600081816103e10152818161089501528181610d45015281816114aa01526115ee0152600081816104250152818161073c01528181611325015281816119760152611f9101526000818161057d015281816108d401528181610d82015281816115030152818161172f01526117750152612ad26000f3fe60806040526004361061017f5760003560e01c8063715018a6116100d657806393f1a40b1161007f578063f2fde38b11610059578063f2fde38b1461054b578063f7c618c11461056b578063ffcd42631461059f57600080fd5b806393f1a40b146104b75780639e494bee1461050b578063d4aa89b51461052b57600080fd5b80637d0d9d5f116100b05780637d0d9d5f146104135780638ad147281461046c5780638da5cb5b1461048c57600080fd5b8063715018a61461039a57806372333631146103af57806373cfc6b2146103cf57600080fd5b80632ea807c51161013857806351eb05a61161011257806351eb05a614610303578063630b5ba11461036557806369883b4e1461037a57600080fd5b80632ea807c5146102b0578063465e81ec146102c3578063505fb46c146102e357600080fd5b80631526fe27116101695780631526fe271461020657806317caf6f1146102785780631d1231311461028e57600080fd5b8062d74850146101845780630832cfbf146101cb575b600080fd5b34801561019057600080fd5b506101b87f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b3480156101d757600080fd5b506101eb6101e636600461287d565b6105bf565b604080519384526020840192909252908201526060016101c2565b34801561021257600080fd5b506102506102213660046127ea565b600260208190526000918252604090912080546001820154928201546003830154600490930154919392909185565b604080519586526020860194909452928401919091526060830152608082015260a0016101c2565b34801561028457600080fd5b506101b860065481565b34801561029a57600080fd5b506102ae6102a936600461289f565b610601565b005b6102ae6102be3660046128d4565b6109fe565b3480156102cf57600080fd5b506101b86102de3660046127ea565b610ef0565b3480156102ef57600080fd5b506102ae6102fe3660046128d4565b610f02565b34801561030f57600080fd5b5061032361031e3660046127ea565b6110df565b6040516101c29190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b34801561037157600080fd5b506102ae611196565b34801561038657600080fd5b506101b86103953660046127ea565b611216565b3480156103a657600080fd5b506102ae611237565b3480156103bb57600080fd5b506101b86103ca3660046128d4565b6112c4565b3480156103db57600080fd5b506104037f000000000000000000000000000000000000000000000000000000000000000081565b60405190151581526020016101c2565b34801561041f57600080fd5b506104477f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c2565b34801561047857600080fd5b506102ae610487366004612848565b61130d565b34801561049857600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610447565b3480156104c357600080fd5b506104f66104d236600461281c565b60056020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101c2565b34801561051757600080fd5b506101b86105263660046127ea565b611834565b34801561053757600080fd5b506103236105463660046127ea565b611840565b34801561055757600080fd5b506102ae6105663660046127ad565b611c2f565b34801561057757600080fd5b506104477f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ab57600080fd5b506101b86105ba36600461281c565b611d5f565b600360205281600052604060002081815481106105db57600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b60005473ffffffffffffffffffffffffffffffffffffffff163314610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600260015414156106f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161067e565b600260018190556000848152602091909152604080822090517f654c9ece000000000000000000000000000000000000000000000000000000008152600481018690529091907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063654c9ece9060240160206040518083038186803b15801561079357600080fd5b505afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb9190612803565b905060006107db86836000611ea2565b60048401549091506107ed868361295e565b111561087b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f656d657267656e6379207265776172642077697468647261773a206e6f74206560448201527f6e6f7567682072657761726420746f6b656e0000000000000000000000000000606482015260840161067e565b8483600401600082825461088f91906129ee565b909155507f00000000000000000000000000000000000000000000000000000000000000009050610900576108fb73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016858761217d565b6109f2565b60008473ffffffffffffffffffffffffffffffffffffffff168660405160006040518083038185875af1925050503d806000811461095a576040519150601f19603f3d011682016040523d82523d6000602084013e61095f565b606091505b50509050806109f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f656d657267656e6379207265776172642077697468647261773a206661696c6560448201527f6420746f2073656e640000000000000000000000000000000000000000000000606482015260840161067e565b505b50506001805550505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067e565b6000838152600360209081526040808320600290925290912081547f000000000000000000000000000000000000000000000000000000000000000011610b48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f6164642072657761726420696e666f3a2072657761726420696e666f206c656e60448201527f677468206578636565647320746865206c696d69740000000000000000000000606482015260840161067e565b81541580610b885750815442908390610b63906001906129ee565b81548110610b7357610b73612a6d565b90600052602060002090600302016001015410155b610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6164642072657761726420696e666f3a2072657761726420706572696f64206560448201527f6e64656400000000000000000000000000000000000000000000000000000000606482015260840161067e565b81541580610c525750815484908390610c2e906001906129ee565b81548110610c3e57610c3e612a6d565b906000526020600020906003020160010154105b610cde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f6164642072657761726420696e666f3a20626164206e657720656e6454696d6560448201527f7374616d70000000000000000000000000000000000000000000000000000000606482015260840161067e565b815460009015610d1f5782548390610cf8906001906129ee565b81548110610d0857610d08612a6d565b906000526020600020906003020160010154610d25565b81600101545b90506000610d3382876129ee565b90506000610d4186836129b1565b90507f0000000000000000000000000000000000000000000000000000000000000000610daf57610daa73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330846122ed565b610e3e565b803414610e3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f6164642072657761726420696e666f3a206e6f7420656e6f7567682066756e6460448201527f7320746f207472616e7366657200000000000000000000000000000000000000606482015260840161067e565b80846004016000828254610e52919061295e565b90915550506040805160608101825284815260208082018a8152928201898152885460018181018b5560008b8152939093209351600390910290930192835592518282015591516002909101558554610eab91906129ee565b60408051898152602081018990528a917fad90731bd0d97445f5af66088f3adebf343c520c20e033cc42f93b124258cdc2910160405180910390a35050505050505050565b6000610efc8242612466565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067e565b6000838152600260208190526040909120015415610ffd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f706f6f6c20616c72656164792065786973747300000000000000000000000000604482015260640161067e565b816006600082825461100f919061295e565b90915550506040805160a0810182526000808252602080830185815283850186815260608501888152608086018581528a86526002948590528786209651875592516001808801919091559151938601939093559151600385015551600493840155825490810183559190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018490555183907fa6b36ea399c1eae2ba98a011138f78722b48f46ad93349269348ccc6e8f1cced906110d29085815260200190565b60405180910390a2505050565b6111116040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6002600154141561117e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161067e565b600260015561118c82611840565b6001805592915050565b60026001541415611203576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161067e565b600260015561121061259a565b60018055565b6004818154811061122657600080fd5b600091825260209091200154905081565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067e565b6112c260006125e3565b565b600081841015806112d457508284115b156112e157506000611306565b8183116112f9576112f284846129ee565b9050611306565b61130384836129ee565b90505b9392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146113f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f6f6e6c794469737472696275746f7256323a206f6e6c7920456d62657244697360448201527f7472696275746f7256322063616e2063616c6c20746869732066756e6374696f60648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a40161067e565b60026001541415611465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161067e565b6002600155600061147584611840565b600085815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684529091528120919250807f0000000000000000000000000000000000000000000000000000000000000000156114d5575047611595565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190612803565b90505b82541561179c576001830154845184547f0000000000000000000000000000000000000000000000000000000000000000916115d0916129b1565b6115da9190612976565b6115e491906129ee565b9150811561179c577f00000000000000000000000000000000000000000000000000000000000000001561170d57808211156116eb5760008673ffffffffffffffffffffffffffffffffffffffff16826040515b60006040518083038185875af1925050503d8060008114611675576040519150601f19603f3d011682016040523d82523d6000602084013e61167a565b606091505b50509050806116e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015260640161067e565b5061179c565b60008673ffffffffffffffffffffffffffffffffffffffff1683604051611638565b8082111561175b5761175673ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016878361217d565b61179c565b61179c73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016878461217d565b84835583517f0000000000000000000000000000000000000000000000000000000000000000906117cd90876129b1565b6117d79190612976565b600184015560405182815273ffffffffffffffffffffffffffffffffffffffff8716907fd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b49060200160405180910390a25050600180555050505050565b6000610efc8242612658565b6118726040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b506000818152600260208181526040808420815160a08101835281548152600182015481850152938101548483015260038082015460608601526004909101546080850152858552825280842080548251818502810185019093528083529394939192909190849084015b8282101561192d57838290600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050815260200190600101906118dd565b505050509050816040015142116119445750919050565b6040517f654c9ece000000000000000000000000000000000000000000000000000000008152600481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063654c9ece9060240160206040518083038186803b1580156119cd57600080fd5b505afa1580156119e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a059190612803565b905080611a7057611a168442612658565b421115611a695742604084810182905284518151928352602083018490529082015284907f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f46906060015b60405180910390a25b5050919050565b60005b8251811015611bb2576000611aaa856040015142868581518110611a9957611a99612a6d565b6020026020010151602001516112c4565b905080611ab75750611ba2565b838281518110611ac957611ac9612a6d565b602002602001015160200151421115611b0857838281518110611aee57611aee612a6d565b602002602001015160200151856040018181525050611b0f565b4260408601525b60006006548660600151868581518110611b2b57611b2b612a6d565b60200260200101516040015184611b4291906129b1565b611b4c91906129b1565b611b569190612976565b905083611b837f0000000000000000000000000000000000000000000000000000000000000000836129b1565b611b8d9190612976565b86518790611b9c90839061295e565b90525050505b611bab81612a05565b9050611a73565b506000848152600260208181526040928390208651808255878301516001830155878501519382018490556060808901516003840155608089015160049093019290925584519384529183018590529282015285917f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f469101611a60565b60005473ffffffffffffffffffffffffffffffffffffffff163314611cb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067e565b73ffffffffffffffffffffffffffffffffffffffff8116611d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161067e565b611d5c816125e3565b50565b600082815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281208054600190910154611306918591611ea2565b3b151590565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f313ce5670000000000000000000000000000000000000000000000000000000017905290516000918291829173ffffffffffffffffffffffffffffffffffffffff861691611e289190612923565b600060405180830381855afa9150503d8060008114611e63576040519150601f19603f3d011682016040523d82523d6000602084013e611e68565b606091505b5091509150818015611e7b575080516020145b611e86576012611e9a565b80806020019051810190611e9a9190612900565b949350505050565b6000838152600260208181526040808420815160a08101835281548152600182015481850152938101548483015260038082015460608601526004909101546080850152878552825280842080548251818502810185019093528083528593849084015b82821015611f565783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611f06565b505084516040517f654c9ece000000000000000000000000000000000000000000000000000000008152600481018b905293945092600092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16915063654c9ece9060240160206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120219190612803565b905083604001514211801561203557508015155b1561213157604084015160005b845181101561212e5760006120648342888581518110611a9957611a99612a6d565b905080612071575061211e565b85828151811061208357612083612a6d565b6020026020010151602001519250600060065488606001518885815181106120ad576120ad612a6d565b602002602001015160400151846120c491906129b1565b6120ce91906129b1565b6120d89190612976565b9050846121057f0000000000000000000000000000000000000000000000000000000000000000836129b1565b61210f9190612976565b612119908761295e565b955050505b61212781612a05565b9050612042565b50505b857f000000000000000000000000000000000000000000000000000000000000000061215d848a6129b1565b6121679190612976565b61217191906129ee565b98975050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916122149190612923565b6000604051808303816000865af19150503d8060008114612251576040519150601f19603f3d011682016040523d82523d6000602084013e612256565b606091505b509150915081801561228057508051158061228057508080602001905181019061228091906127c8565b6122e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015260640161067e565b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161238c9190612923565b6000604051808303816000865af19150503d80600081146123c9576040519150601f19603f3d011682016040523d82523d6000602084013e6123ce565b606091505b50915091508180156123f85750805115806123f85750808060200190518101906123f891906127c8565b61245e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604482015260640161067e565b505050505050565b600082815260036020908152604080832080548251818502810185019093528083528493849084015b828210156124df578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061248f565b50505060008681526002602052604090208251929350919050806125095760009350505050610efc565b60005b8181101561258d5783818151811061252657612526612a6d565b602002602001015160200151861161257d57600654836003015485838151811061255257612552612a6d565b60200260200101516040015161256891906129b1565b6125729190612976565b945050505050610efc565b61258681612a05565b905061250c565b5060009695505050505050565b60045460005b818110156125df576125ce600482815481106125be576125be612a6d565b9060005260206000200154611840565b506125d881612a05565b90506125a0565b5050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082815260036020908152604080832080548251818502810185019093528083528493849084015b828210156126d15783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190612681565b505082519293505050806126ea57600092505050610efc565b60005b818110156127515782818151811061270757612707612a6d565b60200260200101516020015185116127415782818151811061272b5761272b612a6d565b6020026020010151602001519350505050610efc565b61274a81612a05565b90506126ed565b508161275e6001836129ee565b8151811061276e5761276e612a6d565b6020026020010151602001519250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146127a857600080fd5b919050565b6000602082840312156127bf57600080fd5b61130682612784565b6000602082840312156127da57600080fd5b8151801515811461130657600080fd5b6000602082840312156127fc57600080fd5b5035919050565b60006020828403121561281557600080fd5b5051919050565b6000806040838503121561282f57600080fd5b8235915061283f60208401612784565b90509250929050565b60008060006060848603121561285d57600080fd5b8335925061286d60208501612784565b9150604084013590509250925092565b6000806040838503121561289057600080fd5b50508035926020909101359150565b6000806000606084860312156128b457600080fd5b83359250602084013591506128cb60408501612784565b90509250925092565b6000806000606084860312156128e957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561291257600080fd5b815160ff8116811461130657600080fd5b6000825160005b81811015612944576020818601810151858301520161292a565b81811115612953576000828501525b509190910192915050565b6000821982111561297157612971612a3e565b500190565b6000826129ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156129e9576129e9612a3e565b500290565b600082821015612a0057612a00612a3e565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a3757612a37612a3e565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220b95786d44e081aa6c09467635b2a5f59f92fd9ad2aa1fe77ab649de9b28e4a8964736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_updatePool(uint256)": {
        "params": {
          "pid": "The index of the pool. See `poolInfo`."
        },
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      },
      "add(uint256,uint256,uint256)": {
        "params": {
          "_allocPoint": "allocation of the new pool.",
          "_pid": "pool id on DistributorV2"
        }
      },
      "onEmberReward(uint256,address,uint256)": {
        "params": {
          "_amount": "Number of LP tokens the user has",
          "_user": "Address of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": "The index of the pool. See `poolInfo`."
        },
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      }
    },
    "stateVariables": {
      "poolRewardInfo": {
        "details": "this is mostly used for extending reward period"
      },
      "totalAllocPoint": {
        "details": "Total allocation points. Must be the sum of all allocation points in all pools."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_getTimeElapsed(uint256,uint256,uint256)": {
        "notice": "Return reward multiplier over the given _from to _to timestamp."
      },
      "_updatePool(uint256)": {
        "notice": "Update reward variables of the given pool."
      },
      "add(uint256,uint256,uint256)": {
        "notice": "Add a new pool. Can only be called by the owner."
      },
      "addRewardInfo(uint256,uint256,uint256)": {
        "notice": "if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info."
      },
      "currentEndTimestamp(uint256)": {
        "notice": "this will return end timestamp based on the current block timestamp."
      },
      "emergencyRewardWithdraw(uint256,uint256,address)": {
        "notice": "Withdraw reward. EMERGENCY ONLY."
      },
      "onEmberReward(uint256,address,uint256)": {
        "notice": "Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token."
      },
      "pendingTokens(uint256,address)": {
        "notice": "View function to see pending Reward on frontend."
      },
      "poolInfo(uint256)": {
        "notice": "Info of each pool."
      },
      "poolRewardInfo(uint256,uint256)": {
        "notice": "Reward info is a set of {endTimestamp, rewardPerSec} indexed by pool id"
      },
      "poolRewardsPerSec(uint256)": {
        "notice": "View function to see pool rewards per sec"
      },
      "rewardInfoLimit()": {
        "notice": "limit length of reward info how many phases are allowed"
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool."
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each user that stakes LP tokens."
      }
    },
    "notice": "This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward stakers with their native token alongside EMBER. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 321,
        "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 427,
        "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 947,
        "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)934_storage)"
      },
      {
        "astId": 954,
        "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
        "label": "poolRewardInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)941_storage)dyn_storage)"
      },
      {
        "astId": 957,
        "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
        "label": "poolIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 965,
        "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)923_storage))"
      },
      {
        "astId": 969,
        "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RewardInfo)941_storage)dyn_storage": {
        "base": "t_struct(RewardInfo)941_storage",
        "encoding": "dynamic_array",
        "label": "struct ComplexRewarderPerSecV2.RewardInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserInfo)923_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComplexRewarderPerSecV2.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)923_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(RewardInfo)941_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ComplexRewarderPerSecV2.RewardInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(RewardInfo)941_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)923_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ComplexRewarderPerSecV2.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)923_storage)"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)934_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)934_storage"
      },
      "t_struct(PoolInfo)934_storage": {
        "encoding": "inplace",
        "label": "struct ComplexRewarderPerSecV2.PoolInfo",
        "members": [
          {
            "astId": 925,
            "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 927,
            "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 929,
            "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 931,
            "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
            "label": "allocPoint",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 933,
            "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
            "label": "totalRewards",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RewardInfo)941_storage": {
        "encoding": "inplace",
        "label": "struct ComplexRewarderPerSecV2.RewardInfo",
        "members": [
          {
            "astId": 936,
            "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 938,
            "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 940,
            "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
            "label": "rewardPerSec",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)923_storage": {
        "encoding": "inplace",
        "label": "struct ComplexRewarderPerSecV2.UserInfo",
        "members": [
          {
            "astId": 920,
            "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 922,
            "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}