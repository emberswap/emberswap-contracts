{
  "address": "0x2bc8f4a65bd470185C06afB2b8aF5aDFDd6f8A65",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEmberERC20",
          "name": "_ember",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_emberPerBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "AllocPointsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "DevAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "EmissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "FeeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MetaTxnsDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MetaTxnsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLockedUp",
          "type": "uint256"
        }
      ],
      "name": "RewardLockedUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_DEPOSIT_FEE_RATE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_HARVEST_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockupDuration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canHarvest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableMetaTxns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ember",
      "outputs": [
        {
          "internalType": "contract IEmberERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emberPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMetaTxns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaTxnsEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingEmber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accEmberPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEmberInPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedUpRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "transferOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "updateAllocPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_emberPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardLockedUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextHarvestUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastInteraction",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userLockedUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x155ea1706f72f33400aa9b7f1870ace12239de2cfd398b53ed638216d656ecc2",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x9BCd6FCbb04cA5f7453635dEEBd0b9E7Bc28FD15",
    "contractAddress": "0x2bc8f4a65bd470185C06afB2b8aF5aDFDd6f8A65",
    "transactionIndex": 0,
    "gasUsed": "3026291",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000020000000000000004001008000100000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000100000200000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x14ed1b90b66ed8867cc6e74e227260f962f98b7e95297c4e4c0dbc6c8d5bc1e3",
    "transactionHash": "0x155ea1706f72f33400aa9b7f1870ace12239de2cfd398b53ed638216d656ecc2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2905688,
        "transactionHash": "0x155ea1706f72f33400aa9b7f1870ace12239de2cfd398b53ed638216d656ecc2",
        "address": "0x2bc8f4a65bd470185C06afB2b8aF5aDFDd6f8A65",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009bcd6fcbb04ca5f7453635deebd0b9e7bc28fd15"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x14ed1b90b66ed8867cc6e74e227260f962f98b7e95297c4e4c0dbc6c8d5bc1e3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2905688,
        "transactionHash": "0x155ea1706f72f33400aa9b7f1870ace12239de2cfd398b53ed638216d656ecc2",
        "address": "0x2bc8f4a65bd470185C06afB2b8aF5aDFDd6f8A65",
        "topics": [
          "0x74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009bcd6fcbb04ca5f7453635deebd0b9e7bc28fd15"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x14ed1b90b66ed8867cc6e74e227260f962f98b7e95297c4e4c0dbc6c8d5bc1e3"
      }
    ],
    "blockNumber": 2905688,
    "cumulativeGasUsed": "3026291",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b2C58719a2073640BfC390D703eA832057D2543",
    "10500000000000000000"
  ],
  "solcInputHash": "50153a9f69395afc41e25629843a73fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEmberERC20\",\"name\":\"_ember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emberPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"AllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DevAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MetaTxnsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MetaTxnsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMetaTxns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ember\",\"outputs\":[{\"internalType\":\"contract IEmberERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emberPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMetaTxns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaTxnsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingEmber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEmberPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEmberInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emberPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteraction\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userLockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"EmberVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006009819055600c55600d805460ff191690553480156200002557600080fd5b5060405162003504380380620035048339810160408190526200004891620001b2565b6200005c62000056620000ec565b62000126565b6001805562000070436312cc0300620001ee565b600a55600280546001600160a01b0384166001600160a01b031991821617909155600682905560048054821633908117909155600580548316821790556003805490921681179091556040516000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3505062000215565b6000620000f93362000176565b156200010c575060131936013560601c90565b62000121620001ae60201b620026481760201c565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600d5460009060ff168015620001a857506001600160a01b038216730d998dda948c62a4feca7355e46d6b801a1aedd6145b92915050565b3390565b60008060408385031215620001c657600080fd5b82516001600160a01b0381168114620001de57600080fd5b6020939093015192949293505050565b600082198211156200021057634e487b7160e01b600052601160045260246000fd5b500190565b6132df80620002256000396000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c8063578bb42d11610145578063afbcfea1116100bd578063d0d41fe11161008c578063de73149d11610071578063de73149d14610599578063e2bbb158146105a3578063f2fde38b146105b657600080fd5b8063d0d41fe114610573578063d1593bc81461058657600080fd5b8063afbcfea11461053c578063bc83ee2214610544578063bde4aeca14610557578063c9e118521461056a57600080fd5b80638705fcd4116101145780638dbb1e3a116100f95780638dbb1e3a146104ac57806393f1a40b146104bf578063a8c95dc01461052f57600080fd5b80638705fcd41461047b5780638da5cb5b1461048e57600080fd5b8063578bb42d14610447578063630b5ba11461044f578063715018a614610457578063812c64f11461045f57600080fd5b8063330ae003116101d8578063474fa630116101a757806351eb05a61161018c57806351eb05a614610403578063570ca73514610416578063572b6c051461043457600080fd5b8063474fa630146103f157806348cd4cb1146103fa57600080fd5b8063330ae0031461038b5780633ad10ef61461039e57806341275358146103be578063441a3e70146103de57600080fd5b806317caf6f11161022f57806329605e771161021457806329605e771461034c5780632a22bc431461035f5780632e6c998d1461036857600080fd5b806317caf6f1146102fe5780631f1b9a7c1461030757600080fd5b8063081e3eda1461026157806308383640146102785780630ba84cd2146102825780631526fe2714610295575b600080fd5b6007545b6040519081526020015b60405180910390f35b6102806105c9565b005b610280610290366004612f77565b61077a565b6102a86102a3366004612f77565b61086b565b6040805173ffffffffffffffffffffffffffffffffffffffff9099168952602089019790975295870194909452606086019290925261ffff16608085015260a084015260c083015260e08201526101000161026f565b61026560095481565b6002546103279073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161026f565b61028061035a366004612f3d565b6108dd565b610265600c5481565b61037b610376366004612fa9565b610ab4565b604051901515815260200161026f565b610280610399366004612fd9565b610b01565b6004546103279073ffffffffffffffffffffffffffffffffffffffff1681565b6005546103279073ffffffffffffffffffffffffffffffffffffffff1681565b6102806103ec366004613047565b610ec7565b610265600b5481565b610265600a5481565b610280610411366004612f77565b6112ae565b60035473ffffffffffffffffffffffffffffffffffffffff16610327565b61037b610442366004612f3d565b6114c0565b610280611504565b6102806116b4565b6102806116df565b6104686103e881565b60405161ffff909116815260200161026f565b610280610489366004612f3d565b6117a5565b60005473ffffffffffffffffffffffffffffffffffffffff16610327565b6102656104ba366004613047565b611968565b6105076104cd366004612fa9565b6008602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a00161026f565b600d5461037b9060ff1681565b61028061197b565b610265610552366004612fa9565b611af6565b610280610565366004613069565b611ca8565b61026560065481565b610280610581366004612f3d565b611e57565b610265610594366004612fa9565b61201a565b6102656212750081565b6102806105b1366004613047565b61208d565b6102806105c4366004612f3d565b6124df565b60035473ffffffffffffffffffffffffffffffffffffffff163314610674576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f720000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600d5460ff16610706576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f456d6265725661756c743a206d657461207472616e73616374696f6e7320617260448201527f6520616c72656164792064697361626c65640000000000000000000000000000606482015260840161066b565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905561073661264c565b73ffffffffffffffffffffffffffffffffffffffff167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b60035473ffffffffffffffffffffffffffffffffffffffff163314610820576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b6108286116b4565b600654604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600655565b6007818154811061087b57600080fd5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015473ffffffffffffffffffffffffffffffffffffffff909616975093959294919361ffff90911692909188565b60035473ffffffffffffffffffffffffffffffffffffffff163314610983576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b73ffffffffffffffffffffffffffffffffffffffff8116610a26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f5472616e736665724f70657261746f723a206e6577206f70657261746f72206960448201527f7320746865207a65726f20616464726573730000000000000000000000000000606482015260840161066b565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed90600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff851684529091528120600a544310801590610af9575080600301544210155b949350505050565b610b0961264c565b73ffffffffffffffffffffffffffffffffffffffff16610b3e60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610bbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6103e861ffff85161115610c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4164643a206465706f7369742066656520746f6f206869676800000000000000604482015260640161066b565b62127500831115610c98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164643a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161066b565b8015610ca657610ca66116b4565b6000600a544311610cb957600a54610cbb565b435b600954909150610ccb908861268c565b600955604080516101008101825273ffffffffffffffffffffffffffffffffffffffff97881681526020810198895290810191825260006060820181815261ffff9788166080840190815260a0840197885260c0840183815260e0850197885260078054600181018255945293517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600890940293840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909b161790995598517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a83015596517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b82015594517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016919095161790935590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d84015592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68e8301555090517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68f90910155565b60026001541415610f34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066b565b6002600181905550600060078381548110610f5157610f5161324a565b906000526020600020906008020190506000600860008581526020019081526020016000206000610f8061264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508281600001541015611050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f57697468647261773a207573657220616d6f756e74206973206e6f7420656e6f60448201527f7567680000000000000000000000000000000000000000000000000000000000606482015260840161066b565b82826006015410156110e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f57697468647261773a20706f6f6c20746f74616c206973206e6f7420656e6f7560448201527f6768000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b816007015481600401546110f8919061310f565b4211611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f57697468647261773a20796f752063616e6e6f7420776974686472617720796560448201527f7400000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b61118f846112ae565b61119884612698565b82156112205780546111aa90846128a3565b815560068201546111bb90846128a3565b6006830155600254825473ffffffffffffffffffffffffffffffffffffffff908116911614156111f657600c546111f290846128a3565b600c555b61122061120161264c565b835473ffffffffffffffffffffffffffffffffffffffff1690856128af565b600382015481546112419164e8d4a510009161123b91612988565b90612994565b60018201554260048201558361125561264c565b73ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688560405161129c91815260200190565b60405180910390a35050600180555050565b6000600782815481106112c3576112c361324a565b90600052602060002090600802019050806002015443116112e2575050565b60068101548015806112f657506001820154155b1561130657504360029091015550565b6000611316836002015443611968565b9050600061134360095461123b866001015461133d6006548761298890919063ffffffff16565b90612988565b60025460045491925073ffffffffffffffffffffffffffffffffffffffff908116916340c10f19911661137784600a612994565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b50506002546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff90911692506340c10f199150604401600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b50505060068501546114ab91506114a09061123b8464e8d4a51000612988565b60038601549061268c565b60038501555050436002909201919091555050565b600d5460009060ff1680156114fe575073ffffffffffffffffffffffffffffffffffffffff8216730d998dda948c62a4feca7355e46d6b801a1aedd6145b92915050565b60035473ffffffffffffffffffffffffffffffffffffffff1633146115aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b600d5460ff161561163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f456d6265725661756c743a206d657461207472616e73616374696f6e7320617260448201527f6520616c726561647920656e61626c6564000000000000000000000000000000606482015260840161066b565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561167061264c565b73ffffffffffffffffffffffffffffffffffffffff167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b60075460005b818110156116db576116cb816112ae565b6116d4816131e2565b90506116ba565b5050565b6116e761264c565b73ffffffffffffffffffffffffffffffffffffffff1661171c60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6117a360006129a0565b565b60055473ffffffffffffffffffffffffffffffffffffffff166117c661264c565b73ffffffffffffffffffffffffffffffffffffffff1614611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574466565416464726573733a20464f5242494444454e0000000000000000604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff81166118c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574466565416464726573733a205a45524f00000000000000000000000000604482015260640161066b565b6118c861264c565b6005546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917f6690a53895b5691c039238b384bd857e65c42adcc727775381e02cb90a122613910160405180910390a2600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061197482846128a3565b9392505050565b61198361264c565b73ffffffffffffffffffffffffffffffffffffffff166119b860005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b600a544310611aa0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4572726f723a206661726d207374617274656420616c72656164790000000000604482015260640161066b565b60075460005b81811015611aee57600060078281548110611ac357611ac361324a565b906000526020600020906008020190504381600201819055505080611ae7906131e2565b9050611aa6565b505043600a55565b60008060078481548110611b0c57611b0c61324a565b600091825260208083208784526008808352604080862073ffffffffffffffffffffffffffffffffffffffff8a811688529452808620949091029091016003810154815492517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291965093949291909116906370a082319060240160206040518083038186803b158015611ba757600080fd5b505afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf9190612f90565b9050836002015443118015611bf357508015155b15611c53576000611c08856002015443611968565b90506000611c2f60095461123b886001015461133d6006548761298890919063ffffffff16565b9050611c4e611c478461123b8464e8d4a51000612988565b859061268c565b935050505b6000611c838460010154611c7d64e8d4a5100061123b87896000015461298890919063ffffffff16565b906128a3565b9050611c9c84600201548261268c90919063ffffffff16565b98975050505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314611d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b8015611d5c57611d5c6116b4565b611d6461264c565b73ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef360078581548110611dae57611dae61324a565b90600052602060002090600802016001015484604051611dd8929190918252602082015260400190565b60405180910390a2611e2382611e1d60078681548110611dfa57611dfa61324a565b9060005260206000209060080201600101546009546128a390919063ffffffff16565b9061268c565b6009819055508160078481548110611e3d57611e3d61324a565b906000526020600020906008020160010181905550505050565b60045473ffffffffffffffffffffffffffffffffffffffff16611e7861264c565b73ffffffffffffffffffffffffffffffffffffffff1614611ef5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574446576416464726573733a20464f5242494444454e0000000000000000604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff8116611f72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574446576416464726573733a205a45524f00000000000000000000000000604482015260640161066b565b611f7a61264c565b6004546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917fd36d63f6c513a911d7912853de740af476b0fbb569aa769e1a4f5bfa37a325c4910160405180910390a2600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152812060078054839190869081106120605761206061324a565b9060005260206000209060080201905080600701548260040154612084919061310f565b95945050505050565b600260015414156120fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066b565b6002600155600a54431015612191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f456d6265725661756c743a2063616e6e6f74206465706f736974206265666f7260448201527f65206661726d696e672073746172740000000000000000000000000000000000606482015260840161066b565b6000600783815481106121a6576121a661324a565b9060005260206000209060080201905060006008600085815260200190815260200160002060006121d561264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061221a846112ae565b61222384612698565b82156124695781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561229257600080fd5b505afa1580156122a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ca9190612f90565b90506122f76122d761264c565b845473ffffffffffffffffffffffffffffffffffffffff16903087612a15565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561236057600080fd5b505afa158015612374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123989190612f90565b90506123a481836128a3565b600485015490955061ffff161561240e5760048401546000906123d4906127109061123b90899061ffff16612988565b60055486549192506124009173ffffffffffffffffffffffffffffffffffffffff9081169116836128af565b61240a86826128a3565b9550505b825461241a908661268c565b8355600684015461242b908661268c565b6006850155600254845473ffffffffffffffffffffffffffffffffffffffff9081169116141561246657600c54612462908661268c565b600c555b50505b600382015481546124849164e8d4a510009161123b91612988565b60018201554260048201558361249861264c565b73ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161129c91815260200190565b6124e761264c565b73ffffffffffffffffffffffffffffffffffffffff1661251c60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614612599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff811661263c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066b565b612645816129a0565b50565b3390565b6000612657336114c0565b1561268757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6000611974828461310f565b6000600782815481106126ad576126ad61324a565b9060005260206000209060080201905060006008600084815260200190815260200160002060006126dc61264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060030154600014801561272e5750600a544310155b1561274957600582015461274390429061268c565b60038201555b60006127778260010154611c7d64e8d4a5100061123b8760030154876000015461298890919063ffffffff16565b90506127858461037661264c565b1561281457600081118061279d575060008260020154115b1561280f5760006127bb83600201548361268c90919063ffffffff16565b90506127d68360020154600b546128a390919063ffffffff16565b600b5560006002840155426004840181905560058501546127f7919061268c565b600384015561280d61280761264c565b82612a73565b505b61289d565b801561289d576002820154612829908261268c565b6002830155426004830155600b54612841908261268c565b600b558361284d61264c565b73ffffffffffffffffffffffffffffffffffffffff167fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c18360405161289491815260200190565b60405180910390a35b50505050565b6000611974828461319f565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526129839084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612ce5565b505050565b60006119748284613162565b60006119748284613127565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261289d9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612901565b600c546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015612adf57600080fd5b505afa158015612af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b179190612f90565b11156116db57600c546002546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600092612bca92909173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015612b9257600080fd5b505afa158015612ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d9190612f90565b9050808210612c80576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018490529091169063a9059cbb906044015b602060405180830381600087803b158015612c4857600080fd5b505af1158015612c5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289d9190612f5a565b8115612983576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063a9059cbb90604401612c2e565b6000612d47826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612df19092919063ffffffff16565b8051909150156129835780806020019051810190612d659190612f5a565b612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161066b565b6060610af9848460008585843b612e64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066b565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e8d91906130a2565b60006040518083038185875af1925050503d8060008114612eca576040519150601f19603f3d011682016040523d82523d6000602084013e612ecf565b606091505b5091509150612edf828286612eea565b979650505050505050565b60608315612ef9575081611974565b825115612f095782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066b91906130be565b600060208284031215612f4f57600080fd5b813561197481613279565b600060208284031215612f6c57600080fd5b81516119748161329b565b600060208284031215612f8957600080fd5b5035919050565b600060208284031215612fa257600080fd5b5051919050565b60008060408385031215612fbc57600080fd5b823591506020830135612fce81613279565b809150509250929050565b60008060008060008060c08789031215612ff257600080fd5b86359550602087013561300481613279565b9450604087013561ffff8116811461301b57600080fd5b9350606087013592506080870135915060a08701356130398161329b565b809150509295509295509295565b6000806040838503121561305a57600080fd5b50508035926020909101359150565b60008060006060848603121561307e57600080fd5b833592506020840135915060408401356130978161329b565b809150509250925092565b600082516130b48184602087016131b6565b9190910192915050565b60208152600082518060208401526130dd8160408501602087016131b6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156131225761312261321b565b500190565b60008261315d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561319a5761319a61321b565b500290565b6000828210156131b1576131b161321b565b500390565b60005b838110156131d15781810151838201526020016131b9565b8381111561289d5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132145761321461321b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461264557600080fd5b801515811461264557600080fdfea26469706673582212207dc5611a2fb5fc7e9275fc2459a49ad85d99823e7cc290c1204308ea6bbe435064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c8063578bb42d11610145578063afbcfea1116100bd578063d0d41fe11161008c578063de73149d11610071578063de73149d14610599578063e2bbb158146105a3578063f2fde38b146105b657600080fd5b8063d0d41fe114610573578063d1593bc81461058657600080fd5b8063afbcfea11461053c578063bc83ee2214610544578063bde4aeca14610557578063c9e118521461056a57600080fd5b80638705fcd4116101145780638dbb1e3a116100f95780638dbb1e3a146104ac57806393f1a40b146104bf578063a8c95dc01461052f57600080fd5b80638705fcd41461047b5780638da5cb5b1461048e57600080fd5b8063578bb42d14610447578063630b5ba11461044f578063715018a614610457578063812c64f11461045f57600080fd5b8063330ae003116101d8578063474fa630116101a757806351eb05a61161018c57806351eb05a614610403578063570ca73514610416578063572b6c051461043457600080fd5b8063474fa630146103f157806348cd4cb1146103fa57600080fd5b8063330ae0031461038b5780633ad10ef61461039e57806341275358146103be578063441a3e70146103de57600080fd5b806317caf6f11161022f57806329605e771161021457806329605e771461034c5780632a22bc431461035f5780632e6c998d1461036857600080fd5b806317caf6f1146102fe5780631f1b9a7c1461030757600080fd5b8063081e3eda1461026157806308383640146102785780630ba84cd2146102825780631526fe2714610295575b600080fd5b6007545b6040519081526020015b60405180910390f35b6102806105c9565b005b610280610290366004612f77565b61077a565b6102a86102a3366004612f77565b61086b565b6040805173ffffffffffffffffffffffffffffffffffffffff9099168952602089019790975295870194909452606086019290925261ffff16608085015260a084015260c083015260e08201526101000161026f565b61026560095481565b6002546103279073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161026f565b61028061035a366004612f3d565b6108dd565b610265600c5481565b61037b610376366004612fa9565b610ab4565b604051901515815260200161026f565b610280610399366004612fd9565b610b01565b6004546103279073ffffffffffffffffffffffffffffffffffffffff1681565b6005546103279073ffffffffffffffffffffffffffffffffffffffff1681565b6102806103ec366004613047565b610ec7565b610265600b5481565b610265600a5481565b610280610411366004612f77565b6112ae565b60035473ffffffffffffffffffffffffffffffffffffffff16610327565b61037b610442366004612f3d565b6114c0565b610280611504565b6102806116b4565b6102806116df565b6104686103e881565b60405161ffff909116815260200161026f565b610280610489366004612f3d565b6117a5565b60005473ffffffffffffffffffffffffffffffffffffffff16610327565b6102656104ba366004613047565b611968565b6105076104cd366004612fa9565b6008602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a00161026f565b600d5461037b9060ff1681565b61028061197b565b610265610552366004612fa9565b611af6565b610280610565366004613069565b611ca8565b61026560065481565b610280610581366004612f3d565b611e57565b610265610594366004612fa9565b61201a565b6102656212750081565b6102806105b1366004613047565b61208d565b6102806105c4366004612f3d565b6124df565b60035473ffffffffffffffffffffffffffffffffffffffff163314610674576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f720000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600d5460ff16610706576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f456d6265725661756c743a206d657461207472616e73616374696f6e7320617260448201527f6520616c72656164792064697361626c65640000000000000000000000000000606482015260840161066b565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905561073661264c565b73ffffffffffffffffffffffffffffffffffffffff167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b60035473ffffffffffffffffffffffffffffffffffffffff163314610820576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b6108286116b4565b600654604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600655565b6007818154811061087b57600080fd5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015473ffffffffffffffffffffffffffffffffffffffff909616975093959294919361ffff90911692909188565b60035473ffffffffffffffffffffffffffffffffffffffff163314610983576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b73ffffffffffffffffffffffffffffffffffffffff8116610a26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f5472616e736665724f70657261746f723a206e6577206f70657261746f72206960448201527f7320746865207a65726f20616464726573730000000000000000000000000000606482015260840161066b565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed90600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff851684529091528120600a544310801590610af9575080600301544210155b949350505050565b610b0961264c565b73ffffffffffffffffffffffffffffffffffffffff16610b3e60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610bbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6103e861ffff85161115610c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4164643a206465706f7369742066656520746f6f206869676800000000000000604482015260640161066b565b62127500831115610c98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164643a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161066b565b8015610ca657610ca66116b4565b6000600a544311610cb957600a54610cbb565b435b600954909150610ccb908861268c565b600955604080516101008101825273ffffffffffffffffffffffffffffffffffffffff97881681526020810198895290810191825260006060820181815261ffff9788166080840190815260a0840197885260c0840183815260e0850197885260078054600181018255945293517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600890940293840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909b161790995598517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a83015596517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b82015594517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016919095161790935590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d84015592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68e8301555090517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68f90910155565b60026001541415610f34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066b565b6002600181905550600060078381548110610f5157610f5161324a565b906000526020600020906008020190506000600860008581526020019081526020016000206000610f8061264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508281600001541015611050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f57697468647261773a207573657220616d6f756e74206973206e6f7420656e6f60448201527f7567680000000000000000000000000000000000000000000000000000000000606482015260840161066b565b82826006015410156110e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f57697468647261773a20706f6f6c20746f74616c206973206e6f7420656e6f7560448201527f6768000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b816007015481600401546110f8919061310f565b4211611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f57697468647261773a20796f752063616e6e6f7420776974686472617720796560448201527f7400000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b61118f846112ae565b61119884612698565b82156112205780546111aa90846128a3565b815560068201546111bb90846128a3565b6006830155600254825473ffffffffffffffffffffffffffffffffffffffff908116911614156111f657600c546111f290846128a3565b600c555b61122061120161264c565b835473ffffffffffffffffffffffffffffffffffffffff1690856128af565b600382015481546112419164e8d4a510009161123b91612988565b90612994565b60018201554260048201558361125561264c565b73ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688560405161129c91815260200190565b60405180910390a35050600180555050565b6000600782815481106112c3576112c361324a565b90600052602060002090600802019050806002015443116112e2575050565b60068101548015806112f657506001820154155b1561130657504360029091015550565b6000611316836002015443611968565b9050600061134360095461123b866001015461133d6006548761298890919063ffffffff16565b90612988565b60025460045491925073ffffffffffffffffffffffffffffffffffffffff908116916340c10f19911661137784600a612994565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b50506002546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff90911692506340c10f199150604401600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b50505060068501546114ab91506114a09061123b8464e8d4a51000612988565b60038601549061268c565b60038501555050436002909201919091555050565b600d5460009060ff1680156114fe575073ffffffffffffffffffffffffffffffffffffffff8216730d998dda948c62a4feca7355e46d6b801a1aedd6145b92915050565b60035473ffffffffffffffffffffffffffffffffffffffff1633146115aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b600d5460ff161561163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f456d6265725661756c743a206d657461207472616e73616374696f6e7320617260448201527f6520616c726561647920656e61626c6564000000000000000000000000000000606482015260840161066b565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561167061264c565b73ffffffffffffffffffffffffffffffffffffffff167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b60075460005b818110156116db576116cb816112ae565b6116d4816131e2565b90506116ba565b5050565b6116e761264c565b73ffffffffffffffffffffffffffffffffffffffff1661171c60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6117a360006129a0565b565b60055473ffffffffffffffffffffffffffffffffffffffff166117c661264c565b73ffffffffffffffffffffffffffffffffffffffff1614611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574466565416464726573733a20464f5242494444454e0000000000000000604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff81166118c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574466565416464726573733a205a45524f00000000000000000000000000604482015260640161066b565b6118c861264c565b6005546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917f6690a53895b5691c039238b384bd857e65c42adcc727775381e02cb90a122613910160405180910390a2600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061197482846128a3565b9392505050565b61198361264c565b73ffffffffffffffffffffffffffffffffffffffff166119b860005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b600a544310611aa0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4572726f723a206661726d207374617274656420616c72656164790000000000604482015260640161066b565b60075460005b81811015611aee57600060078281548110611ac357611ac361324a565b906000526020600020906008020190504381600201819055505080611ae7906131e2565b9050611aa6565b505043600a55565b60008060078481548110611b0c57611b0c61324a565b600091825260208083208784526008808352604080862073ffffffffffffffffffffffffffffffffffffffff8a811688529452808620949091029091016003810154815492517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291965093949291909116906370a082319060240160206040518083038186803b158015611ba757600080fd5b505afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf9190612f90565b9050836002015443118015611bf357508015155b15611c53576000611c08856002015443611968565b90506000611c2f60095461123b886001015461133d6006548761298890919063ffffffff16565b9050611c4e611c478461123b8464e8d4a51000612988565b859061268c565b935050505b6000611c838460010154611c7d64e8d4a5100061123b87896000015461298890919063ffffffff16565b906128a3565b9050611c9c84600201548261268c90919063ffffffff16565b98975050505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314611d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b8015611d5c57611d5c6116b4565b611d6461264c565b73ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef360078581548110611dae57611dae61324a565b90600052602060002090600802016001015484604051611dd8929190918252602082015260400190565b60405180910390a2611e2382611e1d60078681548110611dfa57611dfa61324a565b9060005260206000209060080201600101546009546128a390919063ffffffff16565b9061268c565b6009819055508160078481548110611e3d57611e3d61324a565b906000526020600020906008020160010181905550505050565b60045473ffffffffffffffffffffffffffffffffffffffff16611e7861264c565b73ffffffffffffffffffffffffffffffffffffffff1614611ef5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574446576416464726573733a20464f5242494444454e0000000000000000604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff8116611f72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574446576416464726573733a205a45524f00000000000000000000000000604482015260640161066b565b611f7a61264c565b6004546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917fd36d63f6c513a911d7912853de740af476b0fbb569aa769e1a4f5bfa37a325c4910160405180910390a2600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152812060078054839190869081106120605761206061324a565b9060005260206000209060080201905080600701548260040154612084919061310f565b95945050505050565b600260015414156120fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066b565b6002600155600a54431015612191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f456d6265725661756c743a2063616e6e6f74206465706f736974206265666f7260448201527f65206661726d696e672073746172740000000000000000000000000000000000606482015260840161066b565b6000600783815481106121a6576121a661324a565b9060005260206000209060080201905060006008600085815260200190815260200160002060006121d561264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061221a846112ae565b61222384612698565b82156124695781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561229257600080fd5b505afa1580156122a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ca9190612f90565b90506122f76122d761264c565b845473ffffffffffffffffffffffffffffffffffffffff16903087612a15565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561236057600080fd5b505afa158015612374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123989190612f90565b90506123a481836128a3565b600485015490955061ffff161561240e5760048401546000906123d4906127109061123b90899061ffff16612988565b60055486549192506124009173ffffffffffffffffffffffffffffffffffffffff9081169116836128af565b61240a86826128a3565b9550505b825461241a908661268c565b8355600684015461242b908661268c565b6006850155600254845473ffffffffffffffffffffffffffffffffffffffff9081169116141561246657600c54612462908661268c565b600c555b50505b600382015481546124849164e8d4a510009161123b91612988565b60018201554260048201558361249861264c565b73ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161129c91815260200190565b6124e761264c565b73ffffffffffffffffffffffffffffffffffffffff1661251c60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614612599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff811661263c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066b565b612645816129a0565b50565b3390565b6000612657336114c0565b1561268757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6000611974828461310f565b6000600782815481106126ad576126ad61324a565b9060005260206000209060080201905060006008600084815260200190815260200160002060006126dc61264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060030154600014801561272e5750600a544310155b1561274957600582015461274390429061268c565b60038201555b60006127778260010154611c7d64e8d4a5100061123b8760030154876000015461298890919063ffffffff16565b90506127858461037661264c565b1561281457600081118061279d575060008260020154115b1561280f5760006127bb83600201548361268c90919063ffffffff16565b90506127d68360020154600b546128a390919063ffffffff16565b600b5560006002840155426004840181905560058501546127f7919061268c565b600384015561280d61280761264c565b82612a73565b505b61289d565b801561289d576002820154612829908261268c565b6002830155426004830155600b54612841908261268c565b600b558361284d61264c565b73ffffffffffffffffffffffffffffffffffffffff167fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c18360405161289491815260200190565b60405180910390a35b50505050565b6000611974828461319f565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526129839084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612ce5565b505050565b60006119748284613162565b60006119748284613127565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261289d9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612901565b600c546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015612adf57600080fd5b505afa158015612af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b179190612f90565b11156116db57600c546002546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600092612bca92909173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015612b9257600080fd5b505afa158015612ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d9190612f90565b9050808210612c80576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018490529091169063a9059cbb906044015b602060405180830381600087803b158015612c4857600080fd5b505af1158015612c5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289d9190612f5a565b8115612983576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063a9059cbb90604401612c2e565b6000612d47826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612df19092919063ffffffff16565b8051909150156129835780806020019051810190612d659190612f5a565b612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161066b565b6060610af9848460008585843b612e64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066b565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e8d91906130a2565b60006040518083038185875af1925050503d8060008114612eca576040519150601f19603f3d011682016040523d82523d6000602084013e612ecf565b606091505b5091509150612edf828286612eea565b979650505050505050565b60608315612ef9575081611974565b825115612f095782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066b91906130be565b600060208284031215612f4f57600080fd5b813561197481613279565b600060208284031215612f6c57600080fd5b81516119748161329b565b600060208284031215612f8957600080fd5b5035919050565b600060208284031215612fa257600080fd5b5051919050565b60008060408385031215612fbc57600080fd5b823591506020830135612fce81613279565b809150509250929050565b60008060008060008060c08789031215612ff257600080fd5b86359550602087013561300481613279565b9450604087013561ffff8116811461301b57600080fd5b9350606087013592506080870135915060a08701356130398161329b565b809150509295509295509295565b6000806040838503121561305a57600080fd5b50508035926020909101359150565b60008060006060848603121561307e57600080fd5b833592506020840135915060408401356130978161329b565b809150509250925092565b600082516130b48184602087016131b6565b9190910192915050565b60208152600082518060208401526130dd8160408501602087016131b6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156131225761312261321b565b500190565b60008261315d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561319a5761319a61321b565b500290565b6000828210156131b1576131b161321b565b500390565b60005b838110156131d15781810151838201526020016131b9565b8381111561289d5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132145761321461321b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461264557600080fd5b801515811461264557600080fdfea26469706673582212207dc5611a2fb5fc7e9275fc2459a49ad85d99823e7cc290c1204308ea6bbe435064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 619,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 725,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1161,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "ember",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IEmberERC20)1114"
      },
      {
        "astId": 1163,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "_operator",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1165,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "devAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1167,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "feeAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1169,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "emberPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1179,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "poolInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(PoolInfo)1158_storage)dyn_storage"
      },
      {
        "astId": 1186,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1140_storage))"
      },
      {
        "astId": 1189,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1191,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "startBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1193,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "totalLockedUpRewards",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1196,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "totalEmberInPools",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1199,
        "contract": "contracts/farm/EmberVault.sol:EmberVault",
        "label": "metaTxnsEnabled",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)1158_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)1158_storage",
        "encoding": "dynamic_array",
        "label": "struct EmberVault.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEmberERC20)1114": {
        "encoding": "inplace",
        "label": "contract IEmberERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)1140_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EmberVault.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1140_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1140_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct EmberVault.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)1140_storage)"
      },
      "t_struct(PoolInfo)1158_storage": {
        "encoding": "inplace",
        "label": "struct EmberVault.PoolInfo",
        "members": [
          {
            "astId": 1143,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 1145,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1147,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1149,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "accEmberPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1151,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "depositFeeBP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 1153,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "harvestInterval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1155,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "totalLp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1157,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "lockupDuration",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserInfo)1140_storage": {
        "encoding": "inplace",
        "label": "struct EmberVault.UserInfo",
        "members": [
          {
            "astId": 1131,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1133,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1135,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "rewardLockedUp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1137,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "nextHarvestUntil",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1139,
            "contract": "contracts/farm/EmberVault.sol:EmberVault",
            "label": "lastInteraction",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}